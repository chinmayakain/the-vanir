// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0

package accounts

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
	"time"
)

type TransferType string

const (
	TransferTypeCREDIT TransferType = "CREDIT"
	TransferTypeDEBIT  TransferType = "DEBIT"
)

func (e *TransferType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = TransferType(s)
	case string:
		*e = TransferType(s)
	default:
		return fmt.Errorf("unsupported scan type for TransferType: %T", src)
	}
	return nil
}

type NullTransferType struct {
	TransferType TransferType `json:"transfer_type"`
	Valid        bool         `json:"valid"` // Valid is true if TransferType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullTransferType) Scan(value interface{}) error {
	if value == nil {
		ns.TransferType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.TransferType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullTransferType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.TransferType), nil
}

type Account struct {
	ID        int64         `json:"id"`
	Owner     string        `json:"owner"`
	Balance   sql.NullInt64 `json:"balance"`
	Currency  string        `json:"currency"`
	CreatedAt time.Time     `json:"created_at"`
}

type Entry struct {
	ID           int64            `json:"id"`
	AccountID    int64            `json:"account_id"`
	Amount       int64            `json:"amount"`
	TransferType NullTransferType `json:"transfer_type"`
	CreatedAt    time.Time        `json:"created_at"`
}

type Transfer struct {
	ID            int64 `json:"id"`
	FromAccountID int64 `json:"from_account_id"`
	ToAccountID   int64 `json:"to_account_id"`
	// must be positive
	Amount    int64     `json:"amount"`
	CreatedAt time.Time `json:"created_at"`
}
